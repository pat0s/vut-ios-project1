#!/bin/sh

export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8

# print help
usage()  
{
  cat <<EOF
Usage: tradelog [-h|--help]
       tradelog [FILTR] [COMMAND] [LOG [LOG2 [...]]
		
Available options:
-h, --help   Print this help and exit

COMMANDS:
list-tisk    Print array of tickers		
profit       Print whole profit from all closed positions
pos          Print currently held positions sorted by value
last-price   Print the last known price for each ticker
hist-ord     Print histogram of the number of transactions according to
             the ticker
graph-pos    Print graph of held positions according to the ticker 		

FILTERS:
-a DATETIME  after: only logs AFTER this date are considered(without this date)
             DATATIME format YYYY-MM-DD HH:MM:SS
-b DATETIME  before: only logs BEFORE this date are considered(without this
             date)
             DATATIME format YYYY-MM-DD HH:MM:SS 
-t TICKER    Only logs with given ticker/-s are considered
-w WIDTH     Set the width of graphs, ie the length of the longest line in
             graph. WIDTH must be a positive integer. Can not be entered
             multiple times.
EOF
  exit 0
}

AFTER_TIME=""
BEFORE_TIME="9999-99-99 99:99:99"   
COMMAND=""
WIDTH=0
TICKERS=""
LOGS=""
GZ_LOGS=""

# process arguments
while [ "$#" -gt 0 ]; do
  case "$1" in 
    -h | --help) 
      usage ;;
    list-tick | profit | pos | last-price | hist-ord | graph-pos)
	  COMMAND="$1"
      shift ;;
    -a)
      AFTER_TIME="$2"
      shift
      shift ;;   
    -b)
      BEFORE_TIME="$2"
      shift
      shift ;;
    -t)
      if [ -n "$TICKERS" ]; then
        TICKERS="$TICKERS|$2\;"
      else
        TICKERS="$2\;"   
      fi
      shift
      shift ;;
    -w)
      if [ "$WIDTH" != 0 ]; then
        echo "Re-entered width." >&2
        exit 1
      fi
      # check if entered width is a positive integer
      if [ -z "${2##*[!0-9]*}" ] || [ "$2" -le 0 ]; then
        echo "Incorrectly entered width. Width has to be a positive number" >&2
        exit 1
      fi
      WIDTH="$2"
      shift
      shift ;;
    *.gz)
      GZ_LOGS="$GZ_LOGS $1"
      shift ;;    
    *.log)
      LOGS="$LOGS $1"
      shift ;;	
    *)
      echo "Incorrect input. Use -h|--help for help." >&2
      exit 1;
      ;;			
  esac
done

# read input
INPUT=""
if [ "$GZ_LOGS" != "" ]; then
  if [ "$LOGS" != "" ]; then
    # input from gz files and logs files
    INPUT="gzip -d -c $GZ_LOGS | cat - $LOGS"
  else
    # input from gz files
    INPUT="gzip -d -c $GZ_LOGS"
  fi
elif [ "$LOGS" != "" ]; then
  # input from logs files
  INPUT="cat $LOGS"
else
  # input from stdin
  INPUT="cat"  
fi

# filter rows by given filters and tickers
FILTERED_FILES="eval $INPUT | awk -F ';' '{if (\$1 > \"$AFTER_TIME\" && \$1 < \"$BEFORE_TIME\") print \$0 }' | egrep '^.*\;($TICKERS)'"

# execute given command
case $COMMAND in
  list-tick)
    eval "$FILTERED_FILES | awk -F ';' '{print \$2}' | sort -u"
    ;;
  profit)
    eval "$FILTERED_FILES | awk -F ';' '{if (\$3 == \"buy\") {sum-=(\$4*\$6)} else {sum+=(\$4*\$6)}  } END {printf(\"%.2f\\n\", sum)}'"
    ;;
  pos)
    eval "$FILTERED_FILES | awk -F ';' '{ last_prices[\$2]=\$4; \
	 if (\$3 == \"buy\") {sums[\$2]+=\$6} else {sums[\$2]-=\$6}}; \
         END {max_len=0; for (sum in sums) \
         { string_sum = sprintf(\"%.2f\", sums[sum]*last_prices[sum]); \
         tmp = length(string_sum); max_len=(tmp > max_len) ? tmp : max_len}; \
         for (sum in sums) \
         { final_sum = sums[sum] * last_prices[sum]; \
         printf(\"%-10s: %*.2f\\n\", sum, max_len, final_sum)}}' \
         | sort -k 3 -r -n"
    ;;
  last-price)
    eval "$FILTERED_FILES | awk -F ';' '{last_prices[\$2]=\$4} \
         END {max_len=0; for (price in last_prices) \
         { tmp = length(last_prices[price]); \
         max_len=(tmp > max_len) ? tmp : max_len}; \
         for (price in last_prices) \
         { printf( \"%-10s: %*.2f\\n\", price, max_len, last_prices[price])}}' \
         | sort -k 1,1"
    ;;
  hist-ord)
    eval "$FILTERED_FILES | awk -F ';' '{ transactions[\$2]+=1 }; \
         END {max=0; for (ticker in transactions) \
         { max=(transactions[ticker] > max) ? transactions[ticker] : max}; \
         for (ticker in transactions) \
         { border=($WIDTH == 0)? transactions[ticker] : (transactions[ticker]/(max/$WIDTH)); \
         for (i=1;i<=border;i++) {histogram=histogram \"#\" }; \
         if (histogram != \"\") {histogram=\" \" histogram}; \
         printf( \"%-10s:%s\\n\", ticker, histogram); histogram=\"\" } }' \
         | sort -k 1"
   ;;
  graph-pos)
    eval "$FILTERED_FILES | awk -F ';' '{ last_price[\$2]=\$4; 
         if (\$3 == \"buy\") {sums[\$2]+=\$6} else {sums[\$2]-=\$6}}; \
         END {max_value=0; for (sum in sums) {tmp=(sums[sum]*last_price[sum]); \
         if (tmp < 0) {tmp=-tmp}; if (tmp > max_value) {max_value=tmp}}; \
         for (sum in sums) \
         { border=($WIDTH == 0)? ((sums[sum]*last_price[sum])/1000) \
         : ((sums[sum] * last_price[sum])/(max_value/$WIDTH)); \
         border=(border < 0) ? -border :border; \
         for(i=1;i<=border;i++) \
         { (sums[sum]<0) ? graph=graph \"!\" : graph=graph \"#\" }; \
         if (graph != \"\") { graph=\" \" graph}; \
         printf( \"%-10s:%s\\n\", sum, graph); graph=\"\" }}' \
         | sort -k 1"
   ;;
  *)
    eval "$FILTERED_FILES"
   ;;   
esac

# EVERYTHING WAS OK
exit 0
